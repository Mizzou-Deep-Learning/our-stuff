from Tkinter import Tk
from tkFileDialog import askopenfilename
import pandas as pd
import numpy as np
import matplotlib
matplotlib.use("tkAgg")
import matplotlib.pyplot as plt
import scipy.fftpack
from scipy import signal


Tk().withdraw()
filename = 'training_mood.csv'#askopenfilename() # choose file with this function
Utime = 23 #upper bound for time collection
Ltime = 0 #Lower bound for time collection
step = 1 #for iterating through time
fields =['period', 'time','HR']  #fields to get. TODO: make it iterate throug hlist, rather than simply selecting HR (part of configurability)
df = pd.read_csv(filename, usecols=fields) #turn excel/csv file into a dataframe (large pandas table)
#ddf = df.dropna()
ddf = df
print ddf #for testing

NFFT = 32       # the length of the windowing segments TODO: Figure out what this means/does
Fs = 2#  # the sampling frequency       ### THIS IS THE Y AXIS

imgNum = 0 #iteration var
ddf = ddf[ddf.period == '10/3/2014'] #selected date. #########TODO: iterate through dates, as well


for imgNum in np.arange(Ltime, Utime,step): #for each image from lower bound to upper bound by step size of step
    plt.cla() #remove axes
    plt.clf() #clear plot to be empty
    tempddf = ddf  #temporary dataframe for snapshot in time
    print imgNum #upper bound for time
    print imgNum + step  #lower bound for time
    tempddf = tempddf[tempddf.time > imgNum] #remove lower bound of time
    tempddf = tempddf[tempddf.time < imgNum + step]  #remove upper bound of time
    print len(tempddf['period']) #size of removed data
    print len(ddf['period']) #size of original data set

    ax = plt.subplot(111) #length,width,height ratio of 1:1:1
    plt.axis('off') #remove axes, neccesary because for convolutions, better to have less white background
    Pxx, freqs, bins, im = plt.specgram(tempddf['HR'], NFFT=NFFT, pad_to=NFFT, noverlap=31, Fs=Fs) #generate spectrogram
    plt.savefig('pic' + str(imgNum) + '.png', bbox_inches='tight', pad_inches = 0) #save plot
    #plt.show() # used for displaying the plot
